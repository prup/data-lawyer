Separate the following parts:

1. The lexer + parser code.

2. The experiment runner.

3. The AST.

4. The utilities.

5. Usage logs.

6. DataLawyer algorithms.
    6a. Implement some new algorithms.
    6b. Add test cases for existing algorithms.


- - - - - - - - - - - -
- - - How to run - - -
- - - - - - - - - - - -

1. Open the project in Eclipse.

2.
  Configure the parameters in wwdum/exptconfig/expts.json

  Here, set the materialize option if you want: if 'false', the latest
  increment to the usage logs is not materialized on to the disk before
  checking the policies. The other option is 'true'.

  If optimizer is set to 'serial', the policies are evaluated one at a
  time using the baseline optimizer. 'union' is not recommended.
  'interleaved' is the DataLawyer optimizer.

  'starting_time_offset' is the starting value of the clock for the
  experiment.

  'starting_qid_offset' is the starting value of the qid for the
  experiment.

  'tocleanup', when 'true', it empties the log generating functions. When
  'false', it clears up the tables, but it will dump back some data in
  users.

  'serialize_to' is the file to which the data structure with the timings
  are serialized.

3. Copy the policies to the file policies.json

4. Copy the queries to users.json

5. Run QuerySocket.java

- - - - - - - - - - - -
- - - - Folders - - - -
- - - - - - - - - - - -

bin: Java .class files.

data: Experimental data.

doc: Javadocs.

lib: Library files used by the Java DataLawyer client.

log: Contains the log files used for debugging.

sql: A collection of SQL scripts that are used by the DataLawyer system to
create UDFs, for testing new SQL commands, etc.

src: Java source files for DataLawyer.

wwdum: Contains the web interface used in the SIGMOD '13 demo and the
experimental setup for the papers.

- - - - - - - - - - - -
- - - - - Files - - - -
- - - - - - - - - - - -

build.xml: build file for the DataLawyer java project.

buildParser.xml: probably not functional. Remove it.

datalogLexer.tokens, datalogParser.tokens: Tokens generated by the ANTLR3
parser generator. They need to be located here.

dum.jar: Jar file for the DataLawyer project.

jar-in-jar-loader.zip:


This code does not seem to work outside the cs.washington.edu
domain. Probably because of a firewall on taipei blocking access from
other IP addresses.

Use "java -cp bin:lib/sqljdbc4.jar DB" to execute the code.


- - -
To use the ANTLR3 parser do the following:
java -cp antlr-3.2.jar org.antlr.Tool datalogParser.g

The command will produce two java files, one corresponding to the lexer and the
other to the parser. Note that the lexer g file is referenced from inside the
parser g file.
